(defpackage #:lexer-test
  (:use #:cl #:lazy-list #:lexer #:small-tests))

(in-package #:lexer-test)

(defmacro def-lexer-test (name grammar str &rest forms)
  `(deftest ,name
     (let ((result (lexer ',grammar ,(make-string-input-stream str))))
       (levery (lambda (get exp) (assert (equal get exp)))
               ;; (lambda (get exp)
               ;;   (and (eq (first get) (first exp))
               ;;        (eq (second get) (second exp))
               ;;        (= (third get) (third exp))
               ;;        (= (fourth get) (fourth exp))))
               result ',forms))))


(deflexer test-lex1
  (word (:+ (:r #\a #\z)))
  (whitespace (:or #\Space #\Newline #\Return) :skip t))

(deftest test-lex1
  "abc sdf her"
  (word |abc| 1 1)
  (word |sdf| 1 5)
  (word |her| 1 9))

(deftest test-lex1
  "abcde
asdffgh dfghd adf
dsfg"
  (word |abcde| 1 1)
  (word |asdffgh| 2 1)
  (word |dfghd| 2 9)
  (word |adf| 2 15)
  (word |dsfg| 3 1))


;; (deflexer signal
;;       (letter (:r #\A #\Z) :fragment)
;;       (digit (:r #\0 #\9) :fragment)
;;       (comma #\,)
;;       (l-s-br #\[)
;;       (r-s-br #\])
;;       (l-c-br #\()
;;       (r-c-br #\))
;;       (circum #\^)
;;       (slash #\/)
;;       (backslash #\\)
;;       (colon #\:)
;;       (semicolon #\;)
;;       (assing (#\: #\=))
;;       (two-dot "..")
;;       (dot #\.)
;;       (mul #\*)
;;       (and-o #\&)
;;       (mod "MOD")
;;       (add #\+)
;;       (sub #\-)
;;       (fract-des #\#)
;;       (not-o #\!)
;;       (less "<")
;;       (less-eq "<=")
;;       (eq "=")
;;       (not-eq "<>")
;;       (gr-eq ">=")
;;       (gr ">")
;;       (or "OR")
;;       (and "AND")
;;       (not "NOT")
;;       (do "DO")
;;       (to "TO")
;;       (endif "ENDIF")
;;       (else "ELSE")
;;       (then "THEN")
;;       (if "IF")
;;       (return "RETURN")
;;       (out "OUT")
;;       (in "IN")
;;       (link "LINK")
;;       (endcase "ENDCASE")
;;       (of "OF")
;;       (case "CASE")
;;       (endfor "ENDFOR")
;;       (for "FOR")
;;       (endloop "ENDLOOP")
;;       (loop "LOOP")
;;       (endwhile "ENDWHILE")
;;       (while "WHILE")
;;       (procedure "PROCEDURE")
;;       (deffunc "DEFFUNC")
;;       (ext "EXT")
;;       (blockfloat "BLOCKFLOAT")
;;       (float "FLOAT")
;;       (integer "INTEGER")
;;       (signal "SIGNAL")
;;       (var "VAR")
;;       (const "CONST")
;;       (begin "BEGIN")
;;       (end "END")
;;       (program "PROGRAM")
;;       (digits-string (:+ digit))
;;       (comment (#\( #\* (:*? :any) #\* #\)) :skip t)
;;       (identifier (letter (:* (:or letter digit))))
;;       (whitespace (:+ (:or #\Newline #\Space #\Return #\Vt #\Page #\Tab)) :skip t))

